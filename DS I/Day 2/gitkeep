MMERGE SORTED ARRAY

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=m-1,j=nums2.length-1;
        if(m==0){
            i=0;
        }
        int e=nums1.length-1;
        while(j>=0&&i>=0){
            if(nums2[j]>nums1[i]){
                nums1[e]=nums2[j];
                --e;
                --j;
            }
            else if(nums2[j]<nums1[i]){
                nums1[e]=nums1[i];
                --e;
                --i;
            }
            else{
                nums1[e]=nums2[j];
                --e;
                --j;
                nums1[e]=nums1[i];
                --e;
                --i;
            }
        }
        if(j>=0){
            for(int k=0;k<=j;k++){
                nums1[k]=nums2[k];
            }
        }
    }
}


TWO SUM

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> mpp=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int check=target-nums[i];
            if(mpp.containsKey(check)){
                //Integer b=mpp.get(check);
                return new int[] {i,mpp.get(check)};
            }
            else{
                mpp.put(nums[i], i);
            }
        }
        return new int[] {2,2};
    }
}

