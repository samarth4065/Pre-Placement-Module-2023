LINKED LIST CYCLE

public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null)
            return false;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {

            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }
    
    MERGE TWO SORTED LIST
    
    class Solution {
   public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
   if(list1 == null){
       return list2;
   }
    if(list2==null){
        return list1;
    }
    if(list1.val<list2.val){
        list1.next = mergeTwoLists(list1.next , list2);
        return list1;
    }
    else{
        list2.next = mergeTwoLists(list2.next , list1);
    }
     return list2;
  }
}
